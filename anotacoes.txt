Criar um host:
edite o arquivo: /etc/apache2/sites-available/000-default.conf

insira o seguinte:
<VirtualHost *:80>
	ServerName nomeDaUrl.dev
	DocumentRoot edereçoDoProjetoNaMáquina
</VirtualHost>

Edite o arquivo: /etc/hosts

insira o seguinte
127.0.0.1   urlCriadaAcima

Restart apache

Deu pra rodar essa url com o servidor embutido do artisan, especificando a porta 80: 'sudo php artisan serve --port 80'

Aula 03 - Criação do banco de dados
	No arquivo config/database.php, na parte do mysql tem 'prefix', que é o prefixo a ser colocado nos nomes das tabelas se quiser.

	Foram criadas as migrations

	Obs: Caso dê problema no tamanho do campo de uma tabela na hora do migrate, pode limitar o email da tabela users pra 100: $table->string('email', 100)->unique();

	foi criada a model e a migration pra produtos

aula 04 - seeders e factories
	será usada seeder pra fazer um usuario padrão e factory pra popular o banco com produtos.

	php artisan make:seeder UsersTableSeeder
	php artisan make:seeder ProductsTableSeeder

	php artisan make:factory ProductFactory

	Pra rodar a seeder e a factory não precisa entrar no php tinker.

	Os dados pra produtos foram definidos na factory.
	Na seeder de produtos foi definida a quantidade("Product::factory()->count(20)->create();"). 
	Na seeder padrão DatabaseSeeder foram chamadas as seeders de usuario e produtos:
		"$this->call(UsersTableSeeder::class);"
    	"$this->call(ProductsTableSeeder::class);"
	No terminal foi dado o comando php artisan db:seed. esse comando roda a seeder DatabaseSeeder, a qual chamará as outras seeders como descrito acima

aula 05 - fazendo a api

	foi criada uma rota e um controller pra produtos e esse controller ficou numa pasta chamada Api

	A rota foi criada com o verbo "resource": 
		Route::resource('products', ProductController::class);

		Obs: na parte "ProductController::class" não precisa colocar o nome do método e nem o colchete de array. O que vai definir qual o método a ser usado é o verbo http selecionado no postman. 

aula 06 - listando todos os produtos
	foi criado um método construtor instanciando a model de produtos pra não ter que fazer isso a cada método, tipo "$product = new Product;"

aula 07 - criando e validando dados
	O status HTTP 500 significa erro interno
	na model de produtos foi inserido o método rules() pra validar
	pra regra de validação pra unique: 'campo' => 'unique:nomeTabela'

aula 8 - mostrando produto - show

	public function show(Product $product)
    {
        return response()->json(['Produto' => $product]);
    }

	quando coloca (Product $product) em vez de ($id), não precisa fazer assim:
	public function show(Product $product)
    {
        $product = $this->product->findOrFail($product->id);
        return response()->json(['Produto' => $product]);
    }

	pra tratar um erro de produto não encontrado:

	public function show($id)
    {
        if (! $product = $this->product->find($product->id)){
			return response()->json(['Erro' => 'Produto não encontrado']);	
		}else{
        	return response()->json(['Produto' => $product]);
		}
    }
	IMPORTANTE: tem q ser 'find' e não 'findOrFail'